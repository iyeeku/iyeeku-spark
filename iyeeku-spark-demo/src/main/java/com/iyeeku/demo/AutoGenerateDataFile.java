package com.iyeeku.demo;

import com.iyeeku.util.AutoGenerateUtil;
import com.iyeeku.util.CompressFileGZIP;
import com.iyeeku.util.FileUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

/**
 * @ClassName AutoGenerateDataFile
 * @Description TODO
 * @Author YangQuan
 * @Date 2019/9/25 20:13
 * @Version 1.0
 **/
public class AutoGenerateDataFile {

    //private final static Logger LOGGER = LoggerFactory.getLogger(AutoGenerateDataFile.class);

    public final static String FILE_PREFIX = "IYEEKU_TEST_HX_JYWLXXWJ";
    public final static String LOCAL_DATA_DIR = "/home/iyeeku/in/";
    public final static String HDFS_BASE_DIR = "/in/data" + FILE_PREFIX + "/";
    public final static String LOG_FILE = "/home/shell/logs/autoGenerateDataFile.log";

    public static void main(String[] args) {
        //LOGGER.info("开始生成数据...");
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
        String dataDate = df.format(new Date());
        String millis = String.valueOf(System.currentTimeMillis());

        String dataFileName = FILE_PREFIX + "." + dataDate + "." + millis + ".dat";
        String flgFileName = FILE_PREFIX + "." + dataDate + "." + millis + ".flg";
        String dataFileOutPath = LOCAL_DATA_DIR + dataDate + "/" + dataFileName;
        String flgFileOutPath = LOCAL_DATA_DIR + dataDate + "/" + flgFileName;

        boolean result = FileUtil.mkdir(LOCAL_DATA_DIR + dataDate);
        System.out.println(result);

        int maxRow = 100;
        Random random = new Random();
        int randomTotal = random.nextInt(maxRow) + maxRow;

        File fout = null;
        FileOutputStream fos = null;
        BufferedWriter bw = null;

        try {
            fout = new File(dataFileOutPath);
            fos = new FileOutputStream(fout);
            bw = new BufferedWriter(new OutputStreamWriter(fos));
            for (int i = 0 ; i < randomTotal ; i++){
                StringBuffer sb = new StringBuffer();
                sb.append("H00100").append(dataDate).append(String.valueOf(System.currentTimeMillis()).substring(7)).append(AutoGenerateUtil.formatCompWithZore(i,10))
                        .append("11")
                        .append("701")   //jyjgbh   CHAR(3)
                        .append(AutoGenerateUtil.formatCompWithZore(random.nextInt(99999999),8)) //gylsh CHAR(8)
                        .append("117010100100446448")  //zhdh  CHAR(18)
                        .append("XDF01010010044644800000000000000")  //dfzh   CHAR(32)
                        .append(String.format("%1$-120s" , "test_wlzhmc_name_" + String.format("%0" + 12 + "d" , random.nextInt(999999999))))  //wlzhmc VARCHAR(120)
                        .append("G10" + String.format("%0" + 11 + "d" , random.nextInt(999999999)))  //xzfdfhh CHAR(14)
                        .append("test_wzfdfhm_name_" + String.format("%0" + 10 + "d" , random.nextInt(999999999)))   //wzfdfhm
                        .append(String.format("% " + 14 + "d" , random.nextInt(999999999)) + "." + String.format("%0" + 2 + "d" , random.nextInt(99))) //jyje 17
                        .append(String.format("% " + 14 + "d" , random.nextInt(999999999)) + "." + String.format("%0" + 2 + "d" , random.nextInt(99)))  // bbjyje 17
                        .append("1")  //xzbz CHAR(1)
                        .append("1")  //szbj CHAR(1)
                        .append("120") //zydh CHAR(3)
                        .append("1")  //jlzt CHAR(1)
                        .append(String.format("%0" + 12 + "d",random.nextInt(999999999))) //cpzxh INTEGER(12)
                        .append(String.format("%0" + 12 + "d",random.nextInt(999999999))) //cpznxh  INTEGER(12)
                        .append("0000000000")    //khdh CHAR(10)
                        .append(String.format("%1$-9s" ,"a"))   //cpdh CHAR(9)
                        .append("01")     // hbzl CHAR(2)
                        .append(dataDate);      //jyrq  CHAR(8)
                bw.write(sb.toString());
                bw.newLine();
            }
        }catch (Exception e){
            e.printStackTrace();
           // LOGGER.error("数据文件生产失败");
        }finally {
            try {
                if (bw != null){
                    bw.close();
                }
                if (fos != null){
                    fos.close();
                }
            } catch (IOException e){
              //  LOGGER.error("Close stream error", e);
            }
        }


        //压缩为.gz文件
        CompressFileGZIP.doCompressFile(dataFileOutPath);
        //删除dat文件
        FileUtil.deleteFile(dataFileOutPath);

        //生成flg文件
        String createFlgTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
        StringBuffer flgBuff = new StringBuffer();
        flgBuff.append(dataFileName).append(" 391 1").append(createFlgTime).append("\n\n")
                .append("FILENAME=").append(dataFileName).append(".gz\n\n")
                .append("FILESIZE=").append(FileUtil.getFileSize(dataFileOutPath + ".gz")).append("\n\n")
                .append("ROWCOUNT=").append(randomTotal).append("\n\n")
                .append("CREATEDATETIME=").append(createFlgTime).append("\n\n")
                .append("SQL=select hxjylsbh,jydqdh,gylsh\n\n")
                .append("ROWLENGTH=390\n\n")
                .append("COLUMNCOUNT=21\n\n")
                .append("COLUMNDESCRIPTION=\n")
                .append("1$$hxjylsbh$$char(30)$$(1,30)\n")
                .append("2$$jydqdh$$char(2)$$(31,32)\n")
                .append("3$$jyjgdh$$char(3)$$(33,35)\n");

        FileUtil.write(flgFileOutPath,flgBuff);


    }



}
