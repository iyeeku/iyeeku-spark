JChar(){
    SYS_CHUNK_ID="JChar"

    JChar_(){
        jecho "JChar函数块函数:"
        jecho "    1.获取长度: JChar length 变量名（存储结果值）\"字符串\""

    }

    JChar_length(){
        _result="${1}"
        shift 1
        eval ${_result}=`echo "${*}" | awk '{print length($0)}'`
    }

    ################################################################################################
    #字符操作
    #在指定字符串左侧填充指定字符（右对齐效果）
    #备注：在传递某些字符时请注意它在shell中的特殊意义，如"*","\"等，如果需要，请将此类字符转义传入
    #参数
    #       1-填充后的位数
    #       2-填充的字符
    #       *-待填充字符串
    ################################################################################################
    JChar_lpad(){
        if [ $# -lt 2 ]; then
            jerror "参数[$*]错误!"
            JChar
            return 1
        fi
        _length=${1}
        _pad_char="${2}"
        shift 2
        echo "${*}" | awk '{_char=$0;_pad_char="'${_pad_char}'";_length='${_length}';while(length(_char)<_length){_char=_pad_char""_char;}print substr(_char,length(_char)-_length+1)}'
        return $?
    }

    ################################################################################################
    #字符操作
    #在指定字符串右侧填充指定字符（左对齐效果）
    #备注：在传递某些字符时请注意它在shell中的特殊意义，如"*","\"等，如果需要，请将此类字符转义传入
    #参数
    #       1-填充后的位数
    #       2-填充的字符
    #       *-待填充字符串
    ################################################################################################
    JChar_rpad(){
        if [ $# -lt 2 ]; then
            jerror "参数[$*]错误!"
            JChar
            return 1
        fi
        _length=${1}
        _pad_char="${2}"
        shift 2
        echo "${*}" | awk '{_char=$0;_pad_char="'${_pad_char}'";_length='${_length}';while(length(_char)<=_length){_char=_char""_pad_char;}print substr(_char,1,_length)}'
        return $?
    }

    ################################################################################################
    #字符操作
    #在指定字符串两端填充指定字符（剧中齐效果）
    #备注：在传递某些字符时请注意它在shell中的特殊意义，如"*","\"等，如果需要，请将此类字符转义传入
    #参数
    #       1-填充后的位数
    #       2-填充的字符
    #       *-待填充字符串
    ################################################################################################
    JChar_pad(){
        if [ $# -lt 2 ]; then
            jerror "参数[$*]错误!"
            JChar
            return 1
        fi
        _length=${1}
        _pad_char="${2}"
        shift 2
        echo "${*}" | awk '{_char=$0;_pad_char="'${_pad_char}'";_length='${_length}';while(length(_char)<_length){_char=_pad_char""_char""_pad_char;}_offer=length(_char)-_length;if(_offer%2 == 0){_start=_offer/2+1}else{_start=_offer/2+0.5};print substr(_char,_start,_length)}'
        return $?
    }

    ################################################################################################
    #转大写
    #参数
    #       *-待填充字符串
    ################################################################################################
    JChar_toUpper(){
        echo "${*}" | awk '{print toupper($0)}'
        return $?
    }

    ################################################################################################
    #转小写
    #参数
    #       *-待填充字符串
    ################################################################################################
    JChar_toLower(){
        echo "${*}" | awk '{print tolower($0)}'
        return $?
    }

    ################################################################################################
    #字符串截取
    #参数
    #       1-开始位置
    #       2-结束位置
    #       *-待填充字符串
    ################################################################################################
    JChar_subStr(){
        if [ $# -lt 3 ]; then
            jerror "参数[$*]错误!"
            JChar
            return 1
        fi
        _start_at=${1}
        _end_at=${2}
        shift 2
        echo "${*}" | awk '{print substr($0,'${_start_at}','${_end_at}')}'
        return $?
    }

    ################################################################################################
    #输出多重变量或消息
    #备注：被"{}"包围的字符串为要替换的内容，主要用于输出状态类消息
    #参数
    #       *-要替换的内容
    #例
    #       a=1  state_1="成功" state_2="失败"
    #       JChar eStr "{state_{a}}" 或 JChar eStr "{state_$a}"
    ################################################################################################
    JChar_eStr(){
        _format(){
            eval echo "`echo \\"${*}\\" | sed 's/\${/\$/g'`" | sed 's/\$//g' | sed 's/\(.*\){/\1\$/'
        }
        _msg="$*"
        _index=`echo "${_msg}" | awk '{print index($0,"{") + index($0,"$")}'`
        while [ ${_index} -gt 0 ]
        do
            _msg=`_format "${_msg}"`
            if [ $? -ne 0 ]; then
                jecho "格式化[${*}]失败!"
                return 1
            fi
            _index=`echo "${_msg}" | awk '{print index($0,"{") + index($0,"$")}'`
        done
        echo "${_msg}" | sed 's/}//g'
    }







}